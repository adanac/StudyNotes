#include<iostream>
#include<string>
#include<set>
#include<algorithm>
#include<iterator>
using namespace std;
void show(string s)
{
	cout<<s<<"  ";
}
int main()
{
	const int N=6;
	string s1[N] = {"ccc", "aaa", "fff", "bbb", "ddd", "eee"};
	string s2[N] = {"ccc", "aaa", "iii", "hhh", "kkk", "jjj"};
	set<string>A(s1, s1+N);
	set<string>B(s2, s2+N);
	set<string>::iterator pr;

	ostream_iterator<string, char>out(cout, "  ");
	cout<<"copy(A.begin(), A.end(), out)\n";
	copy(A.begin(), A.end(), out);

	cout<<"\n\nfor_each(A.begin, A.end(), show)\n";
	for_each(A.begin(), A.end(), show);

	cout<<"\n\nfor(pr=A.begin(); pr != A.end(); pr++)\n";
	for(pr=A.begin(); pr != A.end(); pr++)
		show(*pr);

	cout<<"\n\ncopy(B.begin(), B.end(), out)\n";
	copy(B.begin(), B.end(), out);

	cout<<"\n\nset_union(A.begin(), A.end(), B.begin(), B.end(), out)\n";
	set_union(A.begin(), A.end(), B.begin(), B.end(), out);

	cout<<"\n\nset_intersection(A.begin(), A.end(), B.begin(), b.end(), out)\n\n";
	set_intersection(A.begin(), A.end(), B.begin(), B.end(), out);

	cout<<"\n\nset_difference(A.begin(), A.end(), B.begin(), B.end(), out)\n";
	set_difference(A.begin(), A.end(), B.begin(), B.end(), out);

	set<string>C;
	cout<<"\n\nset_union(A.begin(), A.end(), B.begin(), B.end(), insert_iterator< set<string> >(C, C.begin() ) ), 	copy(C.begin(), C.end(), out)\n";
	set_union(A.begin(), A.end(), B.begin(), B.end(), insert_iterator< set<string> >( C, C.begin() ) );
	copy(C.begin(), C.end(), out);

	string str="sss";
	C.insert(str);
	cout<<"\n\ncopy(C.begin(), C.end(), out)\n";
	copy(C.begin(), C.end(), out);

	cout<<"\n\ncopy(C.lower_bound(bbb), C.upper_bound(ggg), out)\n";
	copy(C.lower_bound("bbb"), C.upper_bound("ggg"), out);

	return 0;
}









	
