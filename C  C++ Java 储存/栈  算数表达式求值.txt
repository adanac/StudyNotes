#include<stdio.h>
struct stack
{
	int n;
	char c;
	struct stack *next;
};

void push_1(struct stack *top[], int n)
{
	struct stack *p;
	p = (struct stack*)malloc( sizeof(struct stack) );
	p->n=n;
	p->next=top[0]->next;
	top[0]->next=p;
}

void push_2(struct stack *top[], char c)
{
	struct stack *p = (struct stack*)malloc( sizeof(struct stack) );
	p->c=c;
	p->next=top[1]->next;
	top[1]->next=p;
}


void pop(struct stack *top[], int i)
{
	struct stack *p;
	if(top[i]->next==NULL)
		return ;

	p=top[i]->next;
	top[i]->next=p->next;
	free(p);
}

	
char compare(char a, char b)
{
	int i, j;
	char s[][7]=
	{         
        {'>','>','<','<','<','>','>'},
        {'>','>','<','<','<','>','>'},
        {'>','>','>','>','<','>','>'},
        {'>','>','>','>','<','>','>'},
        {'<','<','<','<','<','=','0'},
        {'>','>','>','>','0','>','>'},
        {'<','<','<','<','<','0','='}
	};
	switch(a)
	{
        case '+': i=0; break;
        case '-': i=1; break;
        case '*': i=2; break;
        case '/': i=3; break;
        case '(': i=4; break;
        case ')': i=5; break;
        case '#': i=6; break;
    }

    switch(b)
	{
        case '+': j=0; break;
        case '-': j=1; break;
        case '*': j=2; break;
        case '/': j=3; break;
        case '(': j=4; break;
        case ')': j=5; break;
        case '#': j=6; break;
    }
	return s[i][j];
}

int result(char ch, int a, int b)
{
	int sum;
	switch(ch)
	{
	case '+':
		sum=a+b;break;
	case '-':
		sum=a-b;break;
	case '*':
		sum=a*b;break;
	case '/':
		sum=a/b; break;
	default:
		break;
	}
	return sum;
}

void main()
{
	struct stack *top[2];
	char ch;
	int a, b, data, sum;

	top[0]=(struct stack*)malloc( sizeof(struct stack) );
	top[1]=(struct stack*)malloc( sizeof(struct stack) );
	top[0]->next=NULL;
	top[1]->next=NULL;

	push_2(top, '#');
	puts("\n请输入操作数或运算符(以#结束): ");

	ch=getchar();
	while(ch != '#' || top[1]->next->c != '#')
	{
		if( isdigit(ch) )
		{
			data=ch-'0';
			ch=getchar();
			while( isdigit(ch) )
			{
				data=data*10+ch-'0';
				ch=getchar();
			}	
			
			push_1(top, data);
		}
		
		else
		switch( compare(top[1]->next->c, ch) )
		{
	case '<':
		push_2(top, ch);
		ch=getchar();
		break;
	case '=':
		pop(top, 1);
		ch=getchar();
		break;
	case '>':
		a=top[0]->next->n; pop(top, 0);
		b=top[0]->next->n; pop(top, 0);
		
		sum = result(top[1]->next->c, a, b);
		pop(top,1);
		push_1(top, sum);
		break;
		}
	}
	printf("\nsum==%d\n", top[0]->next->n);
}





