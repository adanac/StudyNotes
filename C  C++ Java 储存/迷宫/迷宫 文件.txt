#include<stdio.h>
#include<stdlib.h>
#include<time.h>


int i, j;
int row, col;

typedef struct seat
{
	int x, y;//坐标
	int direct;
	struct seat *next;

}stack;

FILE* fp;
int** read_file(int **maze)
{
	int n, count=0;
	
	if( ( fp=fopen("in.txt", "r") ) == NULL )
	{
		printf("\nCan not open\n");
		exit(0);
	}

    fscanf(fp, "%d", &row);
	printf("\n行数: ");

	printf("%d\n", row);
	maze=(int **)malloc( row*sizeof(int*) );

	fscanf(fp, "%d", &col);
	printf("列数: ");
	printf("%d\n", col);

	for(i=0; i<row; i++)
	{
		maze[i]=(int *)malloc( col*sizeof(int) );
	}
	
	for(i=0; i<row; i++)
		for(j=0; j<col; j++)
		{
			fscanf(fp, "%d", &n);
			maze[i][j]=n;
		}
	fclose(fp);
	return maze;
}	

int read_again(int **maze)
{
	int n;
	if( ( fp=fopen("in.txt", "r") )==NULL)
	{
		printf("\nCan not open\n");
		return 0;
	}
	
	fscanf(fp, "%d", &n);//读到行列不输出
	fscanf(fp, "%d", &n);
	for(i=0; i<row;i++)
		for(j=0; j<col; j++)
		{
			fscanf(fp, "%d", &n);
			maze[i][j]=n;
		}
	fclose(fp);
	return 1;
}

stack* initstack()
{  
	stack *top=(stack *)malloc( sizeof(stack) );
	top->next=NULL;
	if( !top )
		return NULL;

	return top;
}


void push(stack *top, struct seat elem)
{
	struct seat *p=(struct seat*)malloc( sizeof(struct seat) );
	*p=elem;

	p->next=top->next;
	top->next=p;
}


int pop(stack *top, stack *q)
{
	struct seat *p;

	if( !top->next )
	{
		printf("\n栈空\n");
		return 0;
	}

	p=top->next;
	top->next=p->next;

	q->x=p->x;
	q->y=p->y;
	q->direct=p->direct;

	free(p);
	return 1;
}


int noempty(stack *top)
{
	if( !top->next )
		return 0;
	return 1;
}


int pass(stack *top, struct seat point, int **maze)
{
	struct seat *head=top;

	if(point.x<0 || point.x>row-1 || point.y<0 || point.y>col-1 )
	{
		return 0;
	}
	if(maze[point.x][point.y] == 0)
		return 0;

	while(head->next)
	{
		head=head->next;
		if(point.x==head->x && point.y==head->y)
			return 0;	
	}
	return  1;
}

		

struct seat next_point(struct seat point, int direct)
{
	switch(direct)
	{
	case 1:	
		point.y=point.y+1;
		break;
	case 2:
		point.x=point.x+1;
		break;
	case 3:
		point.y=point.y-1;
		break;
	case 4:
    	point.x=point.x-1;
		break;
	default:
		break;
	}
	return point;
}


void outpath(stack *top, int step, int **maze);

int horse_stack(stack *top, struct seat start, struct seat end, int **maze)
{
	struct seat next_seat, q;
	int  step=0;
	
	start.direct=1;
	next_seat=start;

	do
	{
		if( pass(top, next_seat, maze) )
		{
			step++;
			push(top, next_seat);//新入栈的点

			if( next_seat.x == end.x && next_seat.y == end.y )
			{	
				if( (fp=fopen("out.txt", "a+") )== NULL) 
				{
		                   printf("Can not open\n");
	                	   exit(0);
				}
				outpath(top, step, maze); 
				read_again(maze);

		     	pop(top, &q);//删除终点位置
				step--;
				
				while( noempty(top) && top->next->direct==4)
				{ 
					step--;
					pop(top, &q);
				}

 
				if( noempty(top) && top->next->direct < 4)
				{
			 		next_seat = next_point( *(top->next), ++(top->next->direct) );
		         	next_seat.direct=1;	
				}
			}

			else
			{
		     	next_seat = next_point( *(top->next), top->next->direct);
		     	next_seat.direct=1;  
			}
		}

		else
		{	
			while( noempty(top) && top->next->direct==4)
			{
				//maze[top->next->x][top->next->y]='-';//走过的道路标记  
				pop(top, &q);	
				step--;
			}

			if( noempty(top) && top->next->direct < 4)
			{
				next_seat = next_point( *(top->next), ++(top->next->direct) );//根据当前所在位置取得下一个坐标
				next_seat.direct=1;//根据当前所在位置取得下一个方向					
			}	
		}
	}while( noempty(top) );
	printf("\n\n\t\t所有的路径查找完毕\n");
	return 1;
}

void output(int **maze)
{	
	
	if( (fp=fopen("out.txt", "w") )== NULL) 
	{
		printf("Can not open\n");
	    exit(0);
	}

	fprintf(fp, "\t\t迷宫\n");
	for(i=0; i<row; i++)
	{
		printf("\n");
		for(j=0; j<col; j++)
		{
			printf("%6d", maze[i][j]);
			fprintf(fp, "%6d", maze[i][j]);
		}	
		fprintf(fp, "\n");	
	}

	printf("\n\n");	
	fprintf(fp, "\n");
	fclose(fp);
}


void outpath(stack *top, int step, int **maze)
{		
	struct seat *p, *q=top->next;

	fprintf(fp, "\n\n\t\t成功通过, 路径长度: %d\n\n", step);
	
	printf("\n\n\n\t\t成功通过, 路径长度: %d\n", step); 
	
	i=step;
	while(q)
	{
		maze[q->x][q->y]=i;
		i--;
		q=q->next;
	}

	for(i=0; i<row; i++)
	{
		printf("\n");
		for(j=0; j<col; j++)
		{
			printf("%6d", maze[i][j]);
			fprintf(fp, "%6d", maze[i][j]);
		}	
		fprintf(fp, "\n");	
	}

	p=(stack *)malloc( step*sizeof(stack) );					
	i=0;
	q=top->next;
	while(q) 			
	{		
		p[i].x=q->x;
		p[i].y=q->y;
		i++;
		q=q->next;
	}
	printf("\n");				
	fprintf(fp, "\n");					
	for(i=step-1; i>=0; i--)				
	{			
		if(i!=0)			
		{				
			printf("[%d, %d]->", p[i].x, p[i].y);			
			fprintf(fp, "[%d, %d]->", p[i].x, p[i].y);				
		}			
		else				
		{				
			printf("[%d, %d]", p[i].x, p[i].y);			
			fprintf(fp, "[%d, %d]", p[i].x, p[i].y);				
		}
					
	}
	
	fprintf(fp, "\n\n");				
	fclose(fp);		
	free(p);
	printf("\n\n");						

}

void main()
{
	stack *top=NULL;

	struct seat start, end;
	int **maze=NULL;

	maze=read_file(maze);   
	output(maze);
	printf("\n\n\n");
	printf("start x(0--%d): ", row-1);
	scanf("%d", &start.x);

	printf("\nstart y(0--%d): ", col-1);
	scanf("%d", &start.y);
	
	printf("\nend x(0--%d): ", row-1);
	scanf("%d", &end.x);

	printf("\nend y(0--%d): ", col-1);
	scanf("%d", &end.y);
	
	top = initstack();
	horse_stack(top, start, end, maze);	
					
	printf("\n");
}


