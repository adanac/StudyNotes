#include<stdio.h>
#include<stdlib.h>
#define N 100

void input(struct s *p, struct s *q);
void get_next(struct s *q, int next[]);
void kmp(struct s *p, struct s *q, int next[]);

struct s
{
	char *ch;
	int n;//串长
};

int i, j;
int pos;

void input(struct s *p, struct s *q)
{	
	p->ch=(char *)malloc( N*sizeof(char) );
	q->ch=(char *)malloc( N*sizeof(char) );

	printf("主串\n");
	fflush(stdin);
	gets(p->ch);
	p->n=strlen(p->ch);

	printf("\n子串\n");
	fflush(stdin);
	gets(q->ch);
	q->n=strlen(q->ch);

	printf("\n主串开始匹配位置(0~~%d)\n", p->n-q->n+1);
	scanf("%d", &pos);
}

void kmp(struct s *p, struct s *q, int next[])
{
	int count;
	i=pos, j=-1;
	while(i<=p->n-1 && j<=q->n-1)
	{
		if(j==-1)
		{
			i++;
			j++;
		}
		if(p->ch[i] == q->ch[j])
		{
			i++;
			j++;
		}
		else
			j=next[j];
	}

	if(j > q->n-1)
	{

		printf("\n匹配成功\n");
		count=i;
		for(i=count-q->n; i<count;  i++)
		{
			printf("%c", p->ch[i]);
		}
		puts("\n\n");
	}

	else
	{
		printf("Not found\n\n");
	}

}

void get_next(struct s *q, int next[])
{
	i=0, j=-1;
	next[0]=-1;

	while(i <= q->n-2)
	{
		if(j==-1)
		{
			i++;
			j++;
			next[i]=j;
		}

		else if(q->ch[i] == q->ch[j])
		{
			i++;
			j++;
			next[i]=j;
		}
		else
			j=next[j];
	}

	i=0;
	while(i<= q->n-1)
	{
		if(next[i]==next[ next[i] ])
			next[i]=next[ next[i] ];
		else
			next[i] = next[i];
		i++;
	}

}

void main()
{
	struct s *p, *q;
	int next[N];
	p=(struct s*)malloc( sizeof(struct s) );
	q=(struct s*)malloc( sizeof(struct s) );

	input(p, q);
	get_next(q, next);
	kmp(p, q, next);

}





