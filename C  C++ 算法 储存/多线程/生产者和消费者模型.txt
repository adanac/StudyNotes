package bao;

class godown
{
    static final int maxsize=100;
    int curnum;

    godown()
    {}

    godown(int curnum)
    {
        this.curnum=curnum;
    }

    public synchronized void prodeuce(int neednum)
    {
        while(neednum + curnum > maxsize)
        {
            System.out.println("\n要生产的产品数量： " + neednum + ", 超过了还可以库存的数量： " + (maxsize - curnum) + ", 暂时不能执行生产任务.");
            try
            {
                wait();
            }
            catch(InterruptedException e)
            {
                e.printStackTrace();
            }
        }

        curnum+=neednum;
        System.out.println("\n已经生产了" + neednum + "个产品, 现仓储量为" + curnum);
        notifyAll();
    }

    public synchronized void consume(int neednum)
    {
        while(curnum < neednum)
        {
            System.out.println("\n要消费的产品数量： " + neednum + ", 超过了库存的数量： " + curnum + ", 暂时不能执行生产任务.");
            try
            {
                wait();
            }
            catch(InterruptedException e)
            {
                e.printStackTrace();
            }
        }

        curnum-=neednum;
        System.out.println("\n已经消费了" + neednum + "个产品， 现仓储量为" + curnum);

        notifyAll();// 唤醒此对象监视器上等待的所有线程
    }

}

class producer extends Thread
{
    private int neednum;
    private godown g;

    producer(int neednum, godown g)
    {
        this.neednum=neednum;
        this.g=g;
    }

    public void run()
    {
        g.prodeuce(neednum);
    }
}

class consumer extends Thread
{
    private int neednum;
    private godown g;

    consumer(int neednum, godown g)
    {
        this.neednum=neednum;
        this.g=g;
    }

    public void run()
    {
        g.consume(neednum);
    }
}

public class ddd
{

    /**
     * @param args
     */
    public static void main(String[] args)
    {
        godown g=new godown(30);
        consumer a1=new consumer(50, g);
        consumer a2=new consumer(20, g);
        consumer a3=new consumer(30, g);

        producer b1=new producer(10, g);
        producer b2=new producer(10, g);
        producer b3=new producer(10, g);
        producer b4=new producer(10, g);
        producer b5=new producer(10, g);
        producer b6=new producer(10, g);
        producer b7=new producer(80, g);

        a1.start();
        a2.start();
        a3.start();

        b1.start();
        b2.start();
        b3.start();
        b4.start();
        b5.start();
        b6.start();
        b7.start();
    }

}
