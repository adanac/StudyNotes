#include <iostream>
#include <ctime>
#include <cstdlib>
#include <fstream>
#include <windows.h>
#include <cstring>
#include <conio.h>
#include <vector>
#include <algorithm>
#include <stdlib.h>
#include <iomanip>
using namespace std;
class A{
private:
	char a[ 3 ] [ 3 ] ;
public:
	A() {
		strcpy( a[ 0 ], "   " );
		strcpy( a[ 1 ], "   " );
		strcpy( a[ 2 ] , "   " );
	}
	void Max_read();
	void display();
	char* rand_postion();
	char rand_char();
	void show();
	void file();
	void score_show();
	void Max_show();
	void DIY();
	void time_read();
	void time_set();
	void jiemian();
	void Cls_set();
	void DIY_set();
	void Model_set();
};
vector< int > Max_score( 5 );
static char c;
static score = 0;
unsigned int t = 30000;
char cc = '1';
void A::display()
{
	c = rand_char( );
	*rand_postion() = c;
	int i = 0;
	cout << "Score : " << score << endl;
	system("color 0E");
	printf("                            ┏━━┳━━┳━━┓\n"); 
	printf("                            ┃    ┃    ┃    ┃\n");
	printf("                            ┃  %c ┃ %c  ┃ %c  ┃\n", a[ 0 ][ 0 ], a[ 0 ][ 1 ], a[ 0 ][ 2 ]);
	printf("                            ┣━━╋━━╋━━┫\n");
	printf("                            ┃    ┃    ┃    ┃\n");
	printf("                            ┃  %c ┃ %c  ┃ %c  ┃\n", a[ 1 ] [ 0 ], a[ 1 ][ 1 ], a[ 1 ] [ 2 ]);
	printf("                            ┣━━╋━━╋━━┫\n");
	printf("                            ┃    ┃    ┃    ┃\n");
	printf("                            ┃  %c ┃ %c  ┃  %c ┃\n", a[ 2] [ 0 ], a [ 2 ][ 1 ], a [ 2 ][ 2 ]);
	printf("                            ┗━━┻━━┻━━┛\n"); 
	strcpy( a[ 0 ], "   " );
	strcpy( a[ 1 ], "   " );
	strcpy( a[ 2 ], "   " );
}
char *A::rand_postion( )
{
	srand(time( NULL ));
	int i, j;
	char (*p)[3];
	p = a;
	i = rand() % 3;
	j = rand() % 3;
	return *( p + i ) + j;
}
char A:: rand_char( )
{
	char ch1[ ] = "1234567890";
	char ch3[] = "1234567890asdfghjklzxcvbnmqwertyuiop";
	char ch2[ ] = "qwertyuiopasdfghjklzcvbnm";
	srand( time( NULL ) );
	if( cc == '1' )
		return *( ch1 + rand() % 10 );
	else if( cc == '2' )
		return *( ch2 + rand() % 26 );
	else if( cc == '3' )
		return *( ch3 + rand() % 36 );

}
void A::show( )
{
	int i;
	char cc;
	clock_t tt = clock();
	time_read();
	Max_read();
	system( "cls" );
	score = 0;
	for( i = 0; i < 100 ,clock() - tt < t ; i++ ){
		display();
		while( 1 ){
		cc = getch();
		if( cc == c ){
	    system( "cls" );
		score += 10;
		break;
		}
		else{
			cout << "\a";
			system( "cls" );
			score -= 10;
			break;
		}
		}
	}
	score_show();
	Sleep( 1000 );

	sort( Max_score.begin (), Max_score.end () );
	if( score > Max_score[ 0 ] ){
		Max_score.erase ( Max_score.begin () );
		Max_score.push_back ( score );
	}
	file();
}
void A::file()
{
	ofstream OutFile, OutFile1;
	OutFile.open( "score.txt" , ios::binary );
	OutFile.write( (char * )&score, sizeof( score ) );
	OutFile.close ();
	OutFile1.open ( "Max_score.txt", ios::binary );
	vector< int >::iterator it = Max_score.begin();
	while( it != Max_score.end () ){
		OutFile1.write ( ( char * )&(*it), sizeof( int ) );
		it++ ;
	}

	OutFile.close();
}
void A::Max_read()
{
	vector< int >::iterator it = Max_score.begin();
	ifstream InFile;
	ofstream OutFile( "Max_score.txt", ios::app );
	OutFile.close();
	InFile.open ( "Max_score.txt", ios::binary );
	while( !InFile.eof() ){
		InFile.read( ( char * )it++, sizeof( int ) );
	}
	InFile.close();
};
void A::Max_show()
{
	int i = 1;
	system( "cls" );
	sort( Max_score.begin (), Max_score.end () );
	vector< int >::reverse_iterator it = Max_score.rbegin();
	system( "color E0 " );
	cout << "最高分 :             "<< endl<< endl;;
	while( it != Max_score.rend() ){
	cout << setw( i+= 3 ) << setfill( ' ' ) ;
	cout << *it++<< endl<< endl;
	}
	cout << "按任意键返回主菜单" << endl;
}
void A::score_show( )
{
	cout << "您的的得分是 : " << score << "\n按任意键返回主界面" << endl;
	sort( Max_score.begin (), Max_score.end () );
	if( score > Max_score[ 4 ] ){
		system("color 4F");
		cout << "\n恭喜您打破记录获得最高分\n" <<endl;
		cout << "           ^_^ "<< endl << "按任意键返回主界面" << endl;
	}
	system( "pause >> NULL " );
}
void A::DIY()
{
	system( "cls" );
	cout << endl << endl;
	cout <<"       * * * * * * * * * * * * * * * * * * * * * * * * * * *" << endl;
	cout <<"       *                                                   *" << endl; 
	cout <<"       *                  1自定义时间                      *" << endl;
	cout <<"       *                                                   *" << endl; 
	cout <<"       *                  2自定义难度                      *" << endl;
	cout <<"       *                                                   *" << endl; 
	cout <<"       *                  3退出设置                        *"<< endl;
	cout <<"       *                                                   *" << endl; 
	cout <<"       * * * * * * * * * * * * * * * * * * * * * * * * * * *\n" << endl;
	cout <<"请输入你要选的功能" <<endl;
}
void A::time_set( )
{
	ifstream InFile( "time.txt", ios::app );
	InFile.close ();
	ifstream InFile1( "time.txt", ios::binary );
	InFile.read ( ( char * )( & t ), sizeof( unsigned int) );
	InFile.close ();
	cout << "\n\n您之前定义的时间模式为 :" << t / 1000 << 's' << endl;
	cout << "\n\n请输入您想要自定义的时间(s):      " ;
	fflush( stdin );
	cin >> t ;
	t *= 1000;
	cout << "\n\n设定时间成功 : " << t/1000 <<'s' << endl << endl;
	cout <<  "按任意键返回主界面" << endl;

	ofstream OutFile( "time.txt", ios::binary );
	OutFile.write( ( char * )( &t ), sizeof( unsigned int ) );
	OutFile.close ();
}
void A::time_read()
{
	ofstream OutFile( "time.txt", ios::app );
	OutFile.close ();
	ifstream InFile1( "time.txt", ios::binary );
	InFile1.read ( ( char * )( & t ), sizeof( unsigned int) );
	InFile1.close ();
}
void print( )
{
	system("color 2F");
	cout << "  \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3" << endl;
	cout << "  \3                                                                   \3"<< endl;
    cout << "  \3                    * * * * * * * * * * * * * * *                  \3\n";
	cout << "  \3                    *                           *                  \3\n";
	cout << "  \3                    *          打字游戏         *                  \3\n";
	cout << "  \3                    *                           *                  \3\n";
	cout << "  \3                    * * * * * * * * * * * * * * *                  \3\n";
	cout << "  \3                                                                   \3"<< endl;
	cout << "  \3                          1.开始游戏                               \3\n";
	cout << "  \3                                                                   \3"<< endl;
	cout << "  \3                          2.自定义模式                             \3\n";
	cout << "  \3                                                                   \3"<< endl;
    cout << "  \3                          3.查看最高分                             \3\n";
	cout << "  \3                                                                   \3"<< endl;
	cout << "  \3                          0.退出游戏                               \3\n";
	cout << "  \3                                                                   \3"<< endl;
	cout << "  \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3" << endl;
	cout << endl<<"请输入你要选的功能" <<endl;

}
void A:: jiemian( )
{
	char c ;
	print();
	cout << endl;
  
	c = getchar();
	while( c != '0' ){
		switch( c ){
		case '1':{
			show();
			break;
				 }
		case '2':{
			DIY_set();
			break;
				 }
		case '3':{
			Max_show();
			system( "pause >> NULL " );
			break;
				 }
		}
		system( "cls" );
		print();
		c = getchar();
	}
	file();
}
void A::Cls_set ()
{
	system( "cls" );
	cout << endl << endl;
	cout <<"       * * * * * * * * * * * * * * * * * * * * * * * * * * *" << endl;
	cout <<"       *                                                   *" << endl; 
	cout <<"       *                  1初级模式    (只含数字)          *" << endl;
	cout <<"       *                                                   *" << endl; 
	cout <<"       *                  2中级模式    (只含字母)          *" << endl;
	cout <<"       *                                                   *" << endl; 
	cout <<"       *                  3终极模式  (字母和数字混合)      *" << endl;
	cout <<"       *                                                   *" << endl; 
	cout <<"       *                  4退出设置                        *"<< endl;
	cout <<"       *                                                   *" << endl; 
	cout <<"       * * * * * * * * * * * * * * * * * * * * * * * * * * *" << endl;
	cout << endl<<"请输入你要选的模式" <<endl;
	fflush( stdin );
	cc = getchar();
	fflush( stdin );
	if( cc == '1' || cc == '2' || cc == '3' || cc == '4' )
	cout << "你已经成功选择模式" << endl;
	else 
		Cls_set();
}
void A::DIY_set()
{
	DIY();
	char c;
	fflush(stdin );
	c = getchar();
	switch( c ){
	case '1':{
		system( "cls" );
		time_set();
		system( "pause >> NULL " );
		break;
			 }
	case '2':{
		system( "cls" );
		Cls_set();
		system( "pause >> NULL " );
		break;
			 }
		system( "cls" );
		DIY();
		c = getchar();
			 }
}

int  main( void )
{

	class A a;
	a.Max_read();
	a.time_read ();
	a.jiemian ();

	return 0;
}