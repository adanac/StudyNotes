#include<iostream>
#include<string.h>
#include<stdlib.h>
#include<windows.h>
#include<time.h>
#include<conio.h>//_kbhit()
using namespace std;
#define N 21
int i, j;
class snake
{
private:
	int now_long;
	int level;
	char d;//方向
	char stage[N][2*N];
	char *length[2*N];
	char *food;
public:
	void set();
    void show();
    char direct();
    void begin();
    void move();
    int life_snake();
    void display();
};

void snake::set()
{
	for(i=0; i<N; i++)
		for(j=0; j<2*N; j++)
			stage[i][j] = ' ';

		for(i=0; i<2*N; i++)
		{
			stage[0][i] = '_';
		    stage[N-1][i] = '-';
		}

		for(i=1; i<N-1; i++)
		{
			stage[i][0] = '|';
		    stage[i][2*N-1] = '|';
		}
}

void snake::show()
{
	cout<<"this is "<<level<<" level, 方向(w, s, a, d), 空格键暂停, esc键退出\n";
	for(i=0; i<N; i++)
	{
		for(j=0; j<2*N; j++)
			cout<<stage[i][j];
		cout<<"\n";
	}
}


char snake::direct()//方向
{
	char temp;
	if( kbhit() )
	{
		if( ( temp=getch() ) == 32)
		{
			system("pause");
		}
		if( temp == 27)
		{
			system("cls");
			display();
		}

		if( temp == 'a')
			d = 'a';
		if( temp == 'd')
			d = 'd';
		if( temp == 'w')
			d = 'w';
		if( temp == 's')
			d = 's';
	}
	switch(d)
	{
	case 'w':
		if(length[1] - length[2] == 2*N )//if语句不能向左时向右，向上不能向下.
			(*length)+=2*N;
		else
		(*length)-=2*N;	
		break;
	case 's':
		if(length[2] - length[1] == 2*N )
			(*length)-=2*N;
		else
		(*length)+=2*N;
		break;
	case 'd':
	    if( length[2] - length[1] == 1 )
			(*length)--;
		else
			(*length)++;
		break;
	case 'a':
		if(length[1] - length[2] == 1 )
		(*length)++;
		else
			(*length)--;
		break;
	default:
		break;
	}
	return d;
	//return *length;
}
void snake::begin()
{
	set();
	food = &stage[7][2*N-1-3-5];
	for(i=0; i<3; i++)
	{
		length[i] = &stage[7][2*N-1-3+i];
		*length[i] = '*';
	}
	
	*length[0] = '$';
	*food = '@';
	show();
	cout<<"\n\nPlease press any key to start\n";
	getch();
	system("cls");
		
}

void snake::move()
{
	srand( (unsigned)time(NULL) );
 loop:   d = 'a';
		 now_long = 3;
 	while(1)
	{
	    set();
		for(i=now_long-1; i>=1; i--)
		{
			length[i] = length[i-1];
			*length[i] = '*';
		}
	    d = direct(); //不能direct(length, d), 一定要d = direct(length, d),因为方向可能改变
		*length[0] = '$';
		if( length[0] == food ) //头地址==食物地址
		     now_long++;
		for(i=0; i<now_long; i++)
		{
			if( length[i] == food )
			{
				food = &stage[rand()%(N-2)+1][rand()%(2*N-2)+1];			
				i = -1;
			}
		}
		*food = '@';	
		while( life_snake() ==0 )
		{
			system("cls");
			show();	
			cout<<"\nGame Over, please press any key to quit!\n\n";
			getch();
			system("cls");
			display();
		}

    	if( now_long == 10 )
		{	level++;
		    if(level == 5)
			{
			cout<<"\n全部关卡闯关成功，请按任意键退出\n";
			getch();
			system("cls");
			display();
			}
		cout<<"\nCongratilations!, please press any key to the next level";
		getch();
		system("cls");
		begin();
		goto loop;	
		}
		system("cls");		
		show();	
		Sleep(200/level);
			
	 }

}

int snake::life_snake()
{
	int life;
	for(i=0; i<2*N; i++)
	{
		if( length[0] == &stage[0][i] || length[0] == &stage[N-1][i])
			life=0;
	}
	for(i=1; i<N-1; i++)
	{
		if( length[0] == &stage[i][0] || length[0] == &stage[i][2*N-1] )
			life = 0;
	}
	for(i=1; i<now_long; i++)
		if(length[0] == length[i])	
			life = 0;
	return life;
}

void snake::display()
{
	int n;
	cout<<"\n\n\n\t\t\t\t  贪 吃 蛇\n";
	cout<<"\n\n\t\t\t\t请选择难度等级\n";
	cout<<"\n\t\t\t 1.level = 1\t2.level = 2\n\n\t\t\t 3.level = 3\t4.level = 4\n\n";
loop:	cin>>n;
	switch(n)
	{
	case 1:
		level = 1;
		system("cls");
		begin();
		move(); 
		break;
	case 2:
		level = 2;
		system("cls");
		begin();
		move(); 
		break;
	case 3:
		level = 3;
		system("cls");
		begin();
		move(); 
		break;
	case 4:
		level = 4;
		system("cls");
		begin();
		move(); 
		break;
	default:
		cout<<"\n\t\t\t\t请重新选择(1~~4): ";
		goto loop;
		break;	
	}
}

int main()
{
	snake s;
	s.display();
	return 0;
}	
